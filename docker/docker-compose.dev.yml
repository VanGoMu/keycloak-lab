services:
  # Base de datos PostgreSQL para Keycloak
  postgres:
    image: postgres:16-alpine
    container_name: keycloak-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${KC_DB_USER}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak en modo desarrollo
  keycloak-dev:
    image: quay.io/keycloak/keycloak:26.0.7
    container_name: keycloak-dev
    restart: unless-stopped
    command: start-dev --import-realm
    environment:
      # Credenciales del admin inicial
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      
      # Configuraci贸n de base de datos
      KC_DB: ${KC_DB_TYPE}
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${KC_DB_USER}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      
      # Configuraci贸n de hostname
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      
      # HTTP habilitado para desarrollo
      KC_HTTP_ENABLED: true
      
      # Configuraci贸n de logs
      KC_LOG_LEVEL: INFO
      
      # Health y metrics
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      
      # Opciones de memoria JVM
      JAVA_OPTS_KC_HEAP: "-XX:MaxRAMPercentage=70 -XX:InitialRAMPercentage=50"
    ports:
      - "8080:8080"   # Puerto HTTP principal
      - "9000:9000"   # Puerto para health checks y metrics
    volumes:
      # Importar realms al iniciar
      - ../keycloak/realms:/opt/keycloak/data/import
      # Providers personalizados (JAR files)
      - ../keycloak/providers:/opt/keycloak/providers
      # Temas personalizados
      - ../keycloak/themes:/opt/keycloak/themes
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/9000 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Mailhog - Servidor SMTP de prueba para emails
  mailhog:
    image: mailhog/mailhog:latest
    container_name: keycloak-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - keycloak-network

  # Adminer - Interfaz web para administrar PostgreSQL
  adminer:
    image: adminer:latest
    container_name: keycloak-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - keycloak-network
    depends_on:
      - postgres

  # FastAPI - Aplicaci贸n de ejemplo integrada con Keycloak
  fastapi-app:
    build:
      context: ../fast-api-app
      dockerfile: Dockerfile
    container_name: keycloak-fastapi-demo
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      KEYCLOAK_URL: http://keycloak-dev:8080
      KEYCLOAK_REALM: demo-app
      KEYCLOAK_CLIENT_ID: demo-app-frontend
      KEYCLOAK_CLIENT_SECRET: ""
    networks:
      - keycloak-network
    depends_on:
      keycloak-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local

networks:
  keycloak-network:
    driver: bridge
